Advanced_NPC API Reference Alpha-1 (DEV)
=========================================
* More information at <https://github.com/hkzorman/advanced_npc/wiki>

Introduction
------------
You can to use to configure too many behaves for npc. 
The goal is to be able to have live villages in Minetest. 
Here is some information about the API methods and systems.


Inicialized NPC
---------------
The API works with some variables into Lua Entity that represent a NPC, 
then you should initialize the Lua Entity before that it really assume 
a controled behavior.

* `npc.initialize(self, self.object:getpos(), true)` : Initialize a NPC


Actions and Tasks Queue
-----------------------
Actions are "atomic" executable actions the NPC can perform. Tasks are 
sequences of actions that are common enough to be supported by default.
Each action or task is wrapped on a Lua table which tells the action/task 
to be executed and the arguments to be used. However, this is encapsulated 
to the user in the following two methods for a NPCs:

* `npc.add_action(self, action, args)`: Add action into NPC actions queue
    * `action`
* `npc.add_task(self, task, args)`: Add task into NPC actions queue

For both of the above, `action`/`task` is a constant defined in 
`npc.actions.cmd`, and `args` is a Lua table specific to each `action`/`task`.

#### Actions
Following the indexes of `npc.actions.cmd` for actions and respective arguments table:

* `SET_INTERVAL` : Set the interval at which the `action` are executed.
    args = {
        interval = 1, -- A decimal number, in seconds (default is 1 second)
        freeze: false, -- if true, mobs_redo API will not execute until interval is set
    }

#### Tasks
Following the indexes of `npc.actions.cmd` for tasks and respective arguments table:

* `USE_BED` : Sequence of actions that allows the NPC to use a bed.
    args = {
        pos = {x=0,y=0,z=0}, -- Position of bed to be used.
        action = action, --[[ 
            ^ Whether to get up or lay on bed
            ^ Defined in npc.actions.const.beds.action
            ^ Example: npc.actions.const.beds.action.LAY ]]
    }

Schedules
---------
The interesting part of Advanced NPC is its ability to simulate realistic 
behavior in NPCs. Realistic behavior is defined simply as being able to 
perform tasks at a certain time of the day, like usually people do. This 
allow the NPC to go to bed, sleep, get up from it, sit in benches, etc. 
All of this is simulated through a structured code using action and tasks.

The implementation resembles a rough OS process scheduling algorithm where 
only one process is allowed at a time. The processes or tasks are held in 
a queue, where they are executed one at a time in queue fashion. 
Interruptions are allowed, and the interrupted action is re-started once 
the interruption is finished.
